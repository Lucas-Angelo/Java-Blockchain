package src.mining;

import java.util.Date;
import java.util.Random;

import src.blockchain.Chain;
import src.helpers.Sha512;
import src.models.Block;

/**
 * Class for blockchain Miner.
 * 
 * @author Lucas Ã‚ngelo O. M. Rocha.
 * @version 1.0
 * @since Release 01
 */
public class Miner implements Runnable {

    /** Name of the miner, usually a sequential number */
    private int name;
    /** The mined block */
    private Block block;

    /** The random number generator for the hash, fixed in 100 to tests */
    private Random random = new Random(100);
    /** Required for asynchronous function */
    private static final Object brake = new Object();

    public Miner(int name) {
        this.name = name;
    }

    /** The generation/search for the block itself */
    private synchronized void createBlock() {

        synchronized (brake) {
            var id = Chain.getBlockChain().blocksList.size() + 1; // current id + 1 for block
            var timeStamp = new Date().getTime(); // current time in milliseconds
            var randomNumber = 0;
            var previousHash = id == 1 ? "0" : Chain.getBlockChain().blocksList.get(id - 2).getHash(); // Check if the first block, else get previous hash

            var hash = new String();
            while (!hash.startsWith(Chain.getBlockChain().getZeros())) {
                randomNumber = this.random.nextInt(Integer.MAX_VALUE); // Generate a random value
                hash = Sha512.applySha512(previousHash + id + timeStamp + randomNumber); // The new hash
            }

            var timeWorked = (new Date().getTime() - timeStamp); // Check if the first block, else get previous hash

            var N = Chain.getBlockChain().createNbyChangeZeros(timeWorked); // N generated by time worked

            this.block = new Block(this.name, id, timeStamp, randomNumber, previousHash, hash, timeWorked, N);

            // Check if found block is a valid block
            if (Chain.getBlockChain().isValidBlock(this.block))
                System.out.println(this.block.toString());
            else if (Chain.getBlockChain().blocksList.size() == 1)
                System.out.println(this.block.toString());
            else
                System.out.println("Invalid block!");
        }

    }

    /** Called by thread.start(); from main() */
    @Override
    public void run() {
        this.createBlock();
    }
}
